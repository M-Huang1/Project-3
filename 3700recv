#!/usr/bin/python -u
#
# CS3700, Spring 2017
#

import sys
import socket
import time
import datetime
import select
import json
import math

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
EOF_TIMEOUT = 1200

INITIAL_WINDOW_SIZE = 5

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0
dest = 0

largest_acceptable_frame = 0
last_frame_received = -1
next_frame_expected = 0

received_packets = {}

# EOF timer, used to time out if the sender's eof ACKs are lost
eof_timer = 0

# Keys
SEQUENCE_KEY = "sequence"
DATA_KEY = "data"
EOF_KEY = "eof"
ACK_KEY = "ack"
EOF_STATE_TWO = "1"

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))


def writeOut(data):
    sys.stdout.write(data)

# Return deserialized data from the socket
def getJSON():
  global MSG_SIZE
  global dest

  result = sock.recvfrom(MSG_SIZE)
  if result:
    dest = result[1]
    return json.loads(result[0])

# Read data from socket, non blocking
def getJSON_non_blocking():
    global MSG_SIZE

    read, ignore, ignore = select.select([sock], [], [], 0.1)
    for s in read:
        result = s.recvfrom(MSG_SIZE)
        if result:
            return json.loads(result[0])

#def wrapseq():
#  global SEQUENCE
#  SEQUENCE = SEQUENCE%(math.pow(2,32) - 1)
#  SEQUENCE = int(SEQUENCE)

def incrementNFE():
    global next_frame_expected
    next_frame_expected += DATA_SIZE

def incrementLAF():
    global largest_acceptable_frame
    largest_acceptable_frame += DATA_SIZE

def send_ack(sequence):
    global dest
    global ACK_KEY

    msg = json.dumps({ACK_KEY: sequence})
    result = sock.sendto(msg, dest)
    log("[sent ack] ack:" + str(sequence))

def endTransmission():
    global dest
    global EOF_KEY
    global eof_timer
    global EOF_TIMEOUT

    if eof_timer == 0:
        # Start timer
        eof_timer = current_time()
    elif eof_timer < current_time() - EOF_TIMEOUT:
        # EOF timed out, so exit (endTransmission is a recursive function)
        log("[EOF timeout]")
        log("[completed]")
        sys.exit()

    log("[send eof]")
    sock.sendto(json.dumps({EOF_KEY: True}), dest)

    # Wait for eof ACK
    while True:
        decoded = getJSON_non_blocking()
        if decoded and EOF_KEY in decoded and decoded[EOF_KEY] == EOF_STATE_TWO:
            # Received eof state two from receiver, so exit
            log("[recv ack] " + EOF_KEY)
            log("[completed]")
            sys.exit()
        else:
            break

    # Failed to get ACK for the eof, so try again
    endTransmission()

# Returns current time in milliseconds
def current_time():
    return int(round(time.time() * 1000))

def accept_frame(decoded):
    global received_packets
    global DATA_KEY
    global SEQUENCE_KEY
    global last_frame_received
    
    sequence = decoded[SEQUENCE_KEY]
    data = decoded[DATA_KEY]

    received_packets[sequence] = data

    # Avoid concurrent modification
    to_delete = []

    # The highest sequence we've written out (in this loop)
    highest_written_seq = -1

    # Loop over the received packets in order, if the LFR is in the dict, then
    # enable the ability to write the consecutive packets out if there are no gaps
    for (seq, msg) in sorted(received_packets.iteritems()):
        if seq == last_frame_received or (highest_written_seq >= 0 and seq <= (highest_written_seq + DATA_SIZE)):
            writeOut(msg)
            to_delete.append(seq)
            highest_written_seq = seq

            incrementNFE()
            incrementLAF()
            last_frame_received = highest_written_seq

    for key in to_delete:
        del received_packets[key]


def start():
    global next_frame_expected
    global largest_acceptable_frame
    global last_frame_received
    global SEQUENCE_KEY
    global EOF_KEY

    largest_acceptable_frame = DATA_SIZE * INITIAL_WINDOW_SIZE

    while True:
        log("LAF: " + str(largest_acceptable_frame))
        log("LFR: " + str(last_frame_received))
        log("NFE: " + str(next_frame_expected))
        decoded = getJSON()
        if SEQUENCE_KEY in decoded:
            sequence = decoded[SEQUENCE_KEY]
            data = decoded[DATA_KEY]
            recv_sequence = sequence + len(data)

            if sequence > last_frame_received and sequence <= next_frame_expected and sequence <= largest_acceptable_frame:
                # The frame we are looking for (next in sequence)
                log("sequence: " + str(sequence) + " lfr: " + str(last_frame_received))
                log("[recv data] " + str(sequence) + " (" + str(len(data)) + ") " + "ACCEPTED (in-order)")
                last_frame_received = sequence
                accept_frame(decoded)
                send_ack(recv_sequence)
            elif sequence == last_frame_received:
                # Re-ack if we got the same frame (our ack may have been lost)
                send_ack(recv_sequence)
            elif sequence > last_frame_received and sequence <= largest_acceptable_frame:
                # Still within window, but out of order
                accept_frame(decoded)
            else:
                log("not acking sequence: " + str(sequence))

        elif EOF_KEY in decoded:
            log("[recv eof]")
            endTransmission()

start()