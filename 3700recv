#!/usr/bin/python -u
#
# CS3700, Spring 2017
#

import sys
import socket
import time
import datetime
import select
import json
import math
import Queue

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30

INITIAL_WINDOW_SIZE = 5

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0
dest = 0

largest_acceptable_frame = 0
last_frame_received = 0
next_frame_expected = DATA_SIZE

received_packets = {}

# Keys
SEQUENCE_KEY = "sequence"
DATA_KEY = "data"
EOF_KEY = "eof"
ACK_KEY = "ack"

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))


def writeOut(data):
    sys.stdout.write(data)

# Return deserialized data from the socket
def getJSON():
  global MSG_SIZE
  global dest

  result = sock.recvfrom(MSG_SIZE)
  if result:
    dest = result[1]
    return json.loads(result[0])


#def wrapseq():
#  global SEQUENCE
#  SEQUENCE = SEQUENCE%(math.pow(2,32) - 1)
#  SEQUENCE = int(SEQUENCE)

def incrementNFE():
    global next_frame_expected
    next_frame_expected += DATA_SIZE

def incrementLAF():
    global largest_acceptable_frame
    largest_acceptable_frame += DATA_SIZE

def send_ack(sequence):
    global dest
    global ACK_KEY

    msg = json.dumps({ACK_KEY: sequence})
    result = sock.sendto(msg, dest)
    log("[sent ack] ack:" + str(sequence))

def endTransmission():
    global dest
    global EOF_KEY

    log("[send eof]")
    sock.sendto(json.dumps({EOF_KEY: True}), dest)

    # Wait for eof ACK
    while True:
        decoded = getJSON()
        if decoded[EOF_KEY]:
            # Received eof from receiver, so exit
            log("[completed]")
            sys.exit()
        else:
            break

    # Failed to get ACK for the eof, so try again
    endTransmission()


def start():
    global next_frame_expected
    global largest_acceptable_frame
    global last_frame_received
    global SEQUENCE_KEY
    global EOF_KEY

    largest_acceptable_frame = DATA_SIZE * INITIAL_WINDOW_SIZE

    while True:
        log("LAF: " + str(largest_acceptable_frame))
        log("LFR: " + str(last_frame_received))
        log("NFE: " + str(next_frame_expected))
        decoded = getJSON()
        if SEQUENCE_KEY in decoded:
            sequence = decoded[SEQUENCE_KEY]
            data = decoded[DATA_KEY]
            recv_sequence = sequence + len(data)

            if recv_sequence > last_frame_received and sequence <= largest_acceptable_frame:
                received_packets[sequence] = decoded

                if recv_sequence > last_frame_received and sequence <= next_frame_expected and sequence <= largest_acceptable_frame:
                    # The frame we are looking for (next in sequence)
                    writeOut(data)
                    incrementNFE()
                    incrementLAF()
                    last_frame_received = recv_sequence
                    send_ack(recv_sequence)
                else:
                    log("not acking: " + str(decoded))
        elif EOF_KEY in decoded:
            endTransmission()

start()