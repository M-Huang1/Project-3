#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
#Current Sequence number to send
SEQUENCE = 0
#Sequence numbers which have been ACKed
ACKEDSEQUENCE = 0
#Count of current Missing Packet
MISSINGPACKETCOUNT = 0
#Packets that have been retransmitted
RETRANSMITTED = []

#Represents sent packets, entries are removed on ACK
SENTPACKETS= {}
# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_next_packet():
  global SEQUENCE 
  data = sys.stdin.read(DATA_SIZE)
  if len(data)> 0:
    msg = json.dumps({"sequence": SEQUENCE, "data": data, "eof": False})
    
    if sock.sendto(msg, dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      SENTPACKETS[SEQUENCE] = msg
      log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
      SEQUENCE += len(data)
    return True
  else:
    return False

#Retransmit the packet if it hasn't already been retransmmited (I also made it retransmit again after 5 more DUP acks are found, but this should probably be changed)
def retransmit(sequence):
  global MISSINGPACKETCOUNT
  global RETRANSMITTED
  global SENTPACKETS
  remsg = SENTPACKETS[sequence]
  MISSINGPACKETCOUNT += 1
  if resmsg in RETRANSMITTED and MISSINGPACKETCOUNT >= 5:
    RETRANSMITTED.remove(remsg)
    MISSINGPACKETCOUNT = 0
  #Retransmits on first instance of missing packet
  if MISSPACKETCOUNT == 1:
    log("[resent data] " + str(sequence) + " (" + str(len(SENTPACKETS[sequence])) + ")")
  
    if sock.sendto(remsg, dest) < len(remsg):
      log ("[error] unable to fully resend packet")
      MSSINGPACKET -= 1 
      retransmit(sequence)
      return
    RETRANSMITTED.append(remsg)
    
# Send first packet
send_next_packet()
# Now read in data, send packets
while True:
  log("ABOUT TO SLEEP")
  result = sock.recvfrom(MSG_SIZE)

  if result:
    (data, addr) = result
    try:
      decoded = json.loads(data)
      if decoded['sack'] == None:
        # If there is an ack, send next packet
        if decoded['ack'] == ACKEDSEQUENCE:
          log("[recv ack] " + str(ACKEDSEQUENCE))
          savedmsg = SENTPACKETS[ACKEDSEQUENCE]
          del SENTPACKETS[ACKEDSEQUENCE]
          ACKEDSEQUENCE += len(savedmsg["data"])
          send_next_packet() 
      #Meeting this conditional means that a lost packet was succesfully retransmitted 
      elif decoded['sack'] != None and decoded['ack'] == ACKEDSEQUENCE:
          remsg = SENTPACKETS[ACKEDSEQUENCE]
          SENTPACKET.remove(remsg)
          for a,b in decoded['sack']:
            #If a message is sucessfully retransmitted, this function should move on to the next dropped message or the next packet to be sent if no other dropped message
            if a == ACKEDSEQUENCE + len(remsg['data']):
              ACKEDSEQUENCE = b
              MISSINGPACKETCOUNT = 0
              break
      else:
          retransmit(decoded['ack'])        
    except (ValueError, KeyError, TypeError):
      log("[recv corrupt packet]")
  else:
    log("[error] timeout")
    sys.exit(-1)

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
sys.exit(0)
