#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json
import asyncore
import collections

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0

# Dictionary of sequence # to {PACKET: string, SACKED: boolean}
# where SACKED is True if the packet has been SACKed
buffered_packets = []
PACKET = 'packet'
SACKED = 'acked'

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")


class Sender(asyncore.dispatcher):
  def __init__():      
    # Set up the socket
    self.create_socket(socket.AF_INET, socket.SOCK_DGRAM)
    self.connect(dest)
    self.packet_buffer = collections.Deque()
  
  def send_next_packet():
    global SEQUENCE, sent_packets, PACKET, ACKED
    
    if self.packet_buffer:
      # Queue is nonempty
      # Get the next packet
      packet = self.packet_buffer.popleft()
      msg = packet[PACKET]
      
        

    else:
      # Sending new packet
      data = sys.stdin.read(DATA_SIZE)
      if (len(data) > 0):
        msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": False})
        SEQUENCE += len(data)
    
         
      SENT_PACKET[SEQUENCE] = {PACKET: msg, SACKED: False}

 #    if sock.sendto(msg, dest) < len(msg):
  #     log("[error] unable to fully send packet")
   #  else:
    #   log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
        
        # Enter the unSACKed packet in the dictionary
      return True
    else:
      return False

  def handle_clse(self):
    self.close()

  def writable(self):
    return True

  def readable(self):
    return True

  def handle_write(self):
    send_next_packet()

  def handle_read():
    result = self.recvFrom(MSG_SIZE)
    
    if result:
      (data, addr) = result
      try:
        decoded = json.loads(data)
        
        if decoded['ack'] == SEQUENCE:
          log("[recv ack] " + str(SEQUENCE))
      except(ValueError, KeyError, TypeError):
        log("[recv corrupt packet]")

# Send first packet
#send_next_packet()

# Now read in data, send packets
while True:
  log("ABOUT TO SLEEP")
  result = sock.recvfrom(MSG_SIZE)

  if result:
    (data, addr) = result
    try:
      decoded = json.loads(data)

      # If there is an ack, send next packet
      if decoded['ack'] == SEQUENCE:
        log("[recv ack] " + str(SEQUENCE))

        # Try to send next packet; break if no more data
        if (not send_next_packet()):
          break
    except (ValueError, KeyError, TypeError):
      log("[recv corrupt packet]")
  else:
    log("[error] timeout")
    sys.exit(-1)

sender = Sender()
asyncore.loop(timeout=TIMEOUT)

#sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
sys.exit(0)
