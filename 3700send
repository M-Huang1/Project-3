#!/usr/bin/python -u
#
# CS3700, Spring 2017
#

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 2500
DATA_SIZE = 2000
TIMEOUT = 30

#RTT = 1000
RTT = 100
RTT_ALPHA = .8

# Retransmission queue
retransmission_queue= {}

# Retransmission counts for sequence numbers
retransmission_counts = {}

last_ack_received = 0
last_frame_sent = 0

# Receiver window size
RWS = 100

# Default window size
default_window = 1

# Congestion window size
congestion_window = 10

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Keys
SEQUENCE_KEY = "sequence"
DATA_KEY = "data"
EOF_KEY = "eof"
ACK_KEY = "ack"
EOF_STATE_ONE = "0"
EOF_STATE_TWO = "1"


# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

# Returns current time in milliseconds
def current_time():
    return int(round(time.time() * 1000))

# Read a JSON object from the socket and return it as a Python object
def getJSON():
    global MSG_SIZE

    read, ignore, ignore = select.select([sock], [], [], 0.1)
    for s in read:
        result = s.recvfrom(MSG_SIZE)
        if result:
            return json.loads(result[0])

def send_next_packet():
    global SEQUENCE_KEY
    global DATA_KEY
    global EOF_KEY
    global last_frame_sent

    # Read DATA_SIZE bytes
    data = sys.stdin.read(DATA_SIZE)
    if len(data) > 0:
        msg = json.dumps({SEQUENCE_KEY: last_frame_sent, DATA_KEY: data, EOF_KEY: False})
        if sock.sendto(msg, dest) < len(msg):
            log("[error] unable to fully send packet")

        log("[send data] Sequence:" + str(last_frame_sent) + " Size:" + str(len(data)) + "")

        last_frame_sent += len(data)
        retransmission_queue[last_frame_sent] = (msg, current_time())

        return True
    else:
        # Only end transmission if there are no packets to be retransmitted
        if len(retransmission_queue) is 0:
            endTransmission()

# Retransmit the packet
def retransmit(sequence):
    global retransmission_queue
    global retransmission_counts
    global congestion_window
    global default_window
    global RTT

    # Increase retransmission count for sequence
    if sequence not in retransmission_counts:
        retransmission_counts[sequence] = 1
    else:
        retransmission_counts[sequence] += 1

    # A packet was lost, so reset cwnd
    congestion_window = default_window

    # Get the packet to be resent
    remsg = retransmission_queue[sequence][0]

    log("[resent data] " + str(sequence))
    if retransmission_counts[sequence] < 2:
        if sock.sendto(remsg, dest) < len(remsg):
            log ("[error] unable to fully resend packet")
        else:
            # Restart retransmission timer
            restartTimer(sequence)

    if retransmission_counts[sequence] > 1:
        # Multiply RTT by 2 since we've already resent it
        RTT *= 2
        log("[NEW RTT] : " + str(RTT))

def restartTimer(sequence):
    global retransmission_queue

    temp = retransmission_queue[sequence]
    retransmission_queue[sequence] = (temp[0], current_time())


def endTransmission():
    global DATA_KEY
    global SEQUENCE_KEY
    global EOF_KEY
    global EOF_STATE_ONE
    global EOF_STATE_TWO

    log("[send eof]")
    sock.sendto(json.dumps({EOF_KEY: EOF_STATE_ONE}), dest)

    # Wait for eof ACK
    while True:
        decoded = getJSON()
        if decoded and EOF_KEY in decoded:
            # Received eof from receiver, so ack and then exit
            sock.sendto(json.dumps({EOF_KEY: EOF_STATE_TWO}), dest)
            sock.sendto(json.dumps({EOF_KEY: EOF_STATE_TWO}), dest)
            sock.sendto(json.dumps({EOF_KEY: EOF_STATE_TWO}), dest)
            log("[completed]")
            sys.exit()
        else:
            break

    # Failed to get ACK for the eof, so try again
    endTransmission()


# Iterate over the retransmission queue, checking for
# packets that need retransmission
def retransmission_check():
    global retransmission_queue
    global RTT
    global last_ack_received

    # Retransmit the lowest entries first
    for (key, value) in sorted(retransmission_queue.iteritems()):
        if key >= last_ack_received and value[1] < current_time() - (2 * RTT):
            retransmit(key)

def update_rtt(sequence):
    global RTT
    global RTT_ALPHA
    global retransmission_counts
    global retransmission_queue

    if sequence not in retransmission_counts and sequence in retransmission_queue:
        curr = current_time()
        prev = retransmission_queue[sequence][1]
        sample = curr - prev

        new_rtt = (RTT_ALPHA * RTT) + (1 - RTT_ALPHA) * sample

        RTT = new_rtt
        log("[NEW RTT] : " + str(RTT))

def increase_cwnd():
    global RWS
    global congestion_window

    congestion_window = min(RWS, congestion_window + 1)
    log("[NEW CWND] : " + str(congestion_window))


def handle_ack(decoded):
    global ACK_KEY
    global DATA_KEY
    global last_frame_sent
    global last_ack_received
    global RTT

    ack = decoded[ACK_KEY]
    log("[recv ack] " + str(ack))

    # Congestion control
    update_rtt(ack)
    increase_cwnd()

    if ack > last_ack_received and ack <= last_frame_sent:
        last_ack_received = ack

        # Remove all entries <= last_ack_received from the queue
        cumulative_ack(last_ack_received)

def cumulative_ack(ack):
    global retransmission_queue

    to_delete = []

    # Avoid concurrent modification of the queue
    for (key, value) in retransmission_queue.iteritems():
        if key <= ack:
            to_delete.append(key)

    for key in to_delete:
        del retransmission_queue[key]

def current_window_size():
    global congestion_window
    global last_ack_received
    global last_frame_sent
    global DATA_SIZE

    return max(0, congestion_window - ((last_frame_sent - last_ack_received) / DATA_SIZE))



# Main
def start():

    # Begin by sending as many packets as the window allows
    while current_window_size() > 0:
        if not send_next_packet():
            break

    # Now read in data, send packets
    while True:
        log("Window is " + str(current_window_size()))
        decoded = getJSON()
        if decoded:
            handle_ack(decoded)

        # Iterate over the retransmission queue, checking for
        # packets that need retransmission
        retransmission_check()

        if current_window_size() > 0:
            send_next_packet()




start()
